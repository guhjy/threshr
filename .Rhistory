gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
plot(gom_cv, lwd = 2, add_legend = TRUE, legend_pos = "topleft")
mtext("significant wave height / m", side = 3, line = 2.5)
gom_cv$n
document()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
plot(gom_cv, lwd = 2, add_legend = TRUE, legend_pos = "topleft")
mtext("significant wave height / m", side = 3, line = 2.5)
gom_cv$n
predict(gom_cv)
document()
predict(gom_cv)
?revdbayes::predict.evpost
methods()
methods("predict")
document()
predict(gom_cv)
document()
predict(gom_cv)
predict(gom_cv, npy = 10)
npy_gom <- length(gom)/105
npy_gom
predict(gom_cv, npy = npy_gom)
?ithres
?ithresh
document()
predict(gom_cv, npy = npy_gom)
document()
predict(gom_cv, npy = npy_gom)
document()
predict(gom_cv, npy = npy_gom)
pjn <- predict(gom_cv, npy = npy_gom)
plot(pjn)
class(pjn)
ls(pjn)
document()
pjn <- predict(gom_cv, npy = npy_gom)
plot(pjn)
?ithresh
document()
pjn <- predict(gom_cv, npy = npy_gom)
pjn <- predict(gom_cv)
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4, npy = npy_gom)
pjn <- predict(gom_cv)
document()
pjn <- predict(gom_cv)
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4, npy = npy_gom)
pjn <- predict(gom_cv)
pjn <- predict(gom_cv, npy = 2)
pjn <- predict(gom_cv)
pjn <- predict(gom_cv, type = "d")
plot(pjn)
document()
pjn <- predict(gom_cv, type = "d")
plot(pjn)
pjn <- predict(gom_cv, type = "q")
plot(pjn)
pjn <- predict(gom_cv, type = "i")
plot(pjn)
ls(pjn)
pjn <- predict(gom_cv, type = "r")
plot(pjn)
ls(pjn)
ls(gom_cv)
gom_cv$pred_perf
which.max(gom_cv$pred_perf[, 4])
which.max(gom_cv$pred_perf[, 1])
document()
document()
pjn <- predict(gom_cv)
plot(pjn)
pjn <- predict(gom_cv, which_v = 4)
plot(pjn)
ls(gov_cv)
ls(gom_cv)
gom_cv$u_vec
document()
?predict.ithresh
document()
?predict.ithresh
document()
?predict.ithresh
document()
?predict.ithresh
pjn <- predict(gom_cv, which_v = 4)
plot(pjn)
library(devtools)
document()
?predict.ithresh
pjn <- predict(gom_cv, which_v = 4)
?ithresh
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
plot(gom_cv, lwd = 2, add_legend = TRUE, legend_pos = "topleft")
mtext("significant wave height / m", side = 3, line = 2.5)
pjn <- predict(gom_cv, which_v = 4)
pjn <- predict(gom_cv, npy = npy_gom)
npy_gom <- length(gom)/105
pjn <- predict(gom_cv, npy = npy_gom)
ls(pjn)
?revdbayes::predict.evpost
pjn$x
pjn$y
is.vector(4)
is.numeric(4)
is.numeric(4:6)
is.vector(4:6)
?is.vector
?revdbayes::predict.evpost
52*34.4
1:10 == "best"
library(devtools)
?predict.ithresh
document()
?predict.ithresh
plot.lm
plot.lm.default
stats::plot.lm
stats:::plot.lm
?ithresh
# Gulf of Mexico significant wave heights, default priors.
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
plot(gom_cv, lwd = 2, add_legend = TRUE, legend_pos = "topleft")
mtext("significant wave height / m", side = 3, line = 2.5)
gom_cv$v_vec
2 %in% 1:3
1:2 %in% 1:3
any(1:2 %in% 1:3)
all(1:2 %in% 1:3)
!all(1:2 %in% 1:3)
!all(1:4 %in% 1:3)
document()
pjn <- predict(gom_cv, npy = npy_gom)
npy_gom <- length(gom)/105
pjn <- predict(gom_cv, npy = npy_gom)
ls(pjn)
pjn$x
ls(pjn)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100))
pjn$x
pjn$y
ls(pjn)
pjn$n_years
is.vector(2)
document()
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100))
plot(pjn)
plot(pjn, type = "l")
plot(pjn)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100), which_u = 1)
plot(pjn)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100), which_u = 21)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100), which_u = 20)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100), which_u = 21)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100), which_u = 20)
plot(pjn)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(10, 100), which_u = 19)
plot(pjn)
pjn <- predict(gom_cv, npy = npy_gom, n_years = c(100), which_u = 20)
plot(pjn)
plot(gom_cv$sim_vals[19001:20000, 2:3])
plot(gom_cv$sim_vals[18001:19000, 2:3])
plot(gom_cv$sim_vals[19001:20000, 2:3])
?predict.evpost
data(gom)
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
bp <- set_bin_prior(prior = "jeffreys")
npy_gom <- length(gom)/105
bgpg <- rpost_rcpp(n = 1000, model = "bingp", prior = fp, thresh = u,
data = gom, bin_prior = bp)
library(revdbayes)
data(gom)
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
bp <- set_bin_prior(prior = "jeffreys")
npy_gom <- length(gom)/105
bgpg <- rpost_rcpp(n = 1000, model = "bingp", prior = fp, thresh = u,
data = gom, bin_prior = bp)
data(gom)
u <- quantile(gom, probs = 0.95)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
bp <- set_bin_prior(prior = "jeffreys")
npy_gom <- length(gom)/105
bgpg <- rpost_rcpp(n = 1000, model = "bingp", prior = fp, thresh = u,
data = gom, bin_prior = bp)
pjn <- predict(bgpg)
pjn <- predict(bgpg, npy = npy_gom)
plot(pjn)
ls(bgpg)
pjn <- predict(bgpg, npy = npy_gom, type = "p")
plot(pjn)
data(gom)
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
bp <- set_bin_prior(prior = "jeffreys")
npy_gom <- length(gom)/105
bgpg <- rpost_rcpp(n = 1000, model = "bingp", prior = fp, thresh = u,
data = gom, bin_prior = bp)
pjn <- predict(bgpg, npy = npy_gom)
plot(pjn)
ls(pjn)
data(portpirie)
mat <- diag(c(10000, 10000, 100))
pn <- set_prior(prior = "norm", model = "gev", mean = c(0,0,0), cov = mat)
gevp  <- rpost(n = 1000, model = "gev", prior = pn, data = portpirie)
# Predictive density function
d_gevp <- predict(gevp, type = "d", n_years = c(100, 1000))
plot(d_gevp)
# Predictive distribution function
p_gevp <- predict(gevp, type = "p", n_years = c(100, 1000))
plot(p_gevp)
# Predictive quantiles
q_gevp <- predict(gevp, type = "q", n_years = c(100, 1000))
plot(q_gevp)
# Predictive intervals
i_gevp <- predict(gevp, type = "i", n_years = c(100, 1000), hpd = TRUE)
plot(i_gevp, which_int = "both")
plot(i_gevp)
ls(gev_p)
ls(i_gevp)
ls(bgpg)
ls(pjn)
plot(i_gevp)
plot(pjn)
pjn$long
i_gevp$long
pjn <- predict(bgpg, npy = npy_gom, n_years = c(10, 100))
plot(pjn)
pjn <- predict(bgpg, npy = npy_gom)
dim(pjn$long)
pjn$long[, 1:2]
library(devtools)
document()
?predict.ithresh
### GEV
data(portpirie)
mat <- diag(c(10000, 10000, 100))
pn <- set_prior(prior = "norm", model = "gev", mean = c(0,0,0), cov = mat)
gevp  <- rpost_rcpp(n = 1000, model = "gev", prior = pn, data = portpirie)
# Interval estimation
predict(gevp)$long
predict(gevp, hpd = TRUE)$short
# Density function
x <- 4:7
predict(gevp, type = "d", x = x)$y
plot(predict(gevp, type = "d", n_years = c(100, 1000)))
# Distribution function
predict(gevp, type = "p", x = x)$y
plot(predict(gevp, type = "p", n_years = c(100, 1000)))
# Quantiles
predict(gevp, type = "q", n_years = c(100, 1000))$y
# Random generation
plot(predict(gevp, type = "r"))
### Binomial-GP
data(gom)
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
bp <- set_bin_prior(prior = "jeffreys")
npy_gom <- length(gom)/105
bgpg <- rpost_rcpp(n = 1000, model = "bingp", prior = fp, thresh = u,
data = gom, bin_prior = bp)
# Setting npy in call to predict.evpost()
predict(bgpg, npy = npy_gom)$long
# Setting npy in call to rpost() or rpost_rcpp()
bgpg <- rpost_rcpp(n = 1000, model = "bingp", prior = fp, thresh = u,
data = gom, bin_prior = bp, npy = npy_gom)
# Interval estimation
predict(bgpg)$long
predict(bgpg, hpd = TRUE)$short
# Density function
plot(predict(bgpg, type = "d", n_years = c(100, 1000)))
# Distribution function
plot(predict(bgpg, type = "p", n_years = c(100, 1000)))
# Quantiles
predict(bgpg, type = "q", n_years = c(100, 1000))$y
# Random generation
plot(predict(bgpg, type = "r"))
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
npy_gom <- length(gom)/105
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
pjn <- predict(gom_cv, npy = npy_gom)
ls(pjn)
plot(pjn)
pjn2 <- predict(gom_cv, npy = npy_gom, type = "p")
pjn2
ls(pjn2)
plot(pjn2)
pjn2 <- predict(gom_cv, npy = npy_gom, which_u = 20)
plot(pjn2)
library(devtools)
document()
?predict.ithresh
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
npy_gom <- length(gom)/105
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
pjn <- predict(gom_cv, npy = npy_gom)
plot(pjn)
ls(pjn)
?summary.ithresh
pjn <- predict(gom_cv, npy = npy_gom, which_u = 1)
ls(pjn)
plot(pjn)
pjn <- predict(gom_cv, npy = npy_gom, which_u = 19)
plot(pjn)
pjn <- predict(gom_cv, npy = npy_gom, which_u = 20)
plot(pjn)
plot(pjn, type = "l")
plot(pjn)
ls(pjn)
document()
pjn <- predict(gom_cv, npy = npy_gom, which_u = 20)
plot(pjn)
ls(pjn)
pjn$which_u
pjn$which_v
pjn$_uvec
pjn$u_vec
pjn$v_vec
document()
library(devvtools)
library(devtools)
?summary
?summary.lm
?print
?summary
document()
?ithresh
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
plot(gom_cv, lwd = 2, add_legend = TRUE, legend_pos = "topleft")
mtext("significant wave height / m", side = 3, line = 2.5)
ls(gom_cv)
gom_cv$pred_perf
apply(gom_cv$pred_perf, 1, which.max)
apply(gom_cv$pred_perf, 2, which.max)
ls(gom_cv)
document()
?summary.thresh
?summary.ithresh
summary(gom_cv)
document()
summary(gom_cv)
document()
summary(gom_cv)
summary.lm
?summary.lm
coef(lm.D90)  # the bare coefficients
sld90 <- summary(lm.D90 <- lm(weight ~ group -1))  # omitting intercept
sld90
lm.D9. <- lm(weight ~ group + I(group != "Ctl"))
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
summary(lm.D9)
summary(gom_cv)
ls(gom_cv)
document()
summary(gom_cv)
document()
summary(gom_cv)
?row.names
summary(gom_cv)
document()
summary(gom_cv)
document()
summary(gom_cv)
summary(lm.D9)
document()
summary(gom_cv)
document()
summary(gom_cv)
document()
summary(gom_cv)
document()
summary(gom_cv)
document()
summary(gom_cv)
res <- summary(gom_cv)
res
summary(lm.D9)
res <- summary(lm.D9)
summary(gom_cv)
?summary.lm
res <- summary(gom_cv)
class(res)
document()
?summary.ithresh
document()
?summary.ithresh
document()
?summary.ithresh
document()
?summary.ithresh
library(threshr)
?threshr
document()
library(threshr)
?threshr
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
# Symmetric confidence intervals
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
# Profile-likelihood-based confidence intervals
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
plot(gom_stab)
library(threshr)
?threshr
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
npy_gom <- length(gom)/105
gom_cv <- ithresh(data = gom, u_vec = u_vec, n_v = 4)
pjn <- predict(gom_cv, npy = npy_gom)
plot(pjn)
test()
devtools::check()
document()
library(threshr)
?stability
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
plot(gom_stab)
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, method = "Nelder-Mead")
plot(gom_stab)
document()
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, method = "Nelder-Mead")
plot(gom_stab)
warnings()
?abline
?qchisq
?par
?text
?na.omiy
?na.omit
?box
?ecdf
?quantile
library(threshr)
check()
library(threshr)
check()
library(threshr)
check()
library(threshr)
document()
check()
document()
document()
document()
load_all()
library(threshr)
check()
load_all()
devtools()
library(devtools)
devtools()
load_all()
document()
library(threshr)
check()
load_all()
document()
library(threshr)
check()
load_all()
document()
library(threshr)
check()
load_all()
library(devtools)
library(threshr)
check()
load_all()
document()
library(threshr)
check()
document()
load_all(0)
load_all()
library(threshr)
check()
load_all(0)
load_all()
document()
library(threshr)
check()
revdbayes::set_prior
revdbayes::predict
revdbayes::predict.evpost
revdbayes:::predict.evpost
load_all()
document()
library(threshr)
check()
load_all()
document()
library(threshr)
check()
library(devtools)
document()
