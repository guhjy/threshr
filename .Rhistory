if (!is.null(u.ps)) u.x <- 100*u.ps
nexc <- unlist(lapply(u,function(x)sum(data>x))) # numbers of excesses of each threshold
cat(paste("Fitting GP model at", nint, "thresholds"), fill = TRUE)
cat(paste("Fitting at threshold ..."), fill = TRUE)
for (i in 1:nint) {
cat(i, fill = TRUE)
z <- gpd.fit(data, u[i], show = FALSE)
m[i, ] <- z$mle
m[i, 1] <- m[i, 1] - m[i, 2] * u[i]
d <- matrix(c(1, -u[i]), ncol = 1)
v <- t(d) %*% z$cov %*% d
s[i, ] <- z$se
s[i, 1] <- sqrt(v)
up[i, ] <- m[i, ] + 1.96 * s[i, ]
ul[i, ] <- m[i, ] - 1.96 * s[i, ]
if (prof){
xlow <- m[i,2]-1.96*mult[1]*s[i,2]
xup <- m[i,2]+1.96*mult[2]*s[i,2]
temp <- my.gpd.profxi(z,xlow=xlow,xup=xup)
ul[i,2] <- temp[1]
up[i,2] <- temp[2]
}
}
names <- c(expression(paste("MLE of ",sigma[u]-xi*u)),expression(paste("MLE of ",xi)))
which.plot <- ifelse(do.xi,2,1)
if (is.null(my.xlab)) my.xlab <- "threshold"
for (i in which.plot) {
um <- max(up[, i])
ud <- min(ul[, i])
plot(u.x, m[, i], ylim = c(ud, um), xlab = my.xlab,
ylab = names[i], type = "b", pch=16,...)
for (j in 1:nint) lines(c(u.x[j], u.x[j]), c(ul[j, i], up[j,
i]))
if (add.nexc) axis(3,at=u.x,labels=nexc,cex.axis=0.7)
}
zz$u <- u; zz$nexc <- nexc; zz$m <- m
invisible(zz)
}
################################################################################################
my.gpd.profxi <- function (z, xlow, xup, conf = 0.95, nint = 100, plotit=F){
#    cat("If routine fails, try changing plotting interval", fill = TRUE)
xdat <- z$data
u <- z$threshold
v1 <- numeric(nint); v2 <- numeric(nint)
#
gpd.plikxi <- function(a) {
if (abs(xi) < 10^(-4)) {
if (a <= 0) {
l <- 10^6
} else {
l <- length(xdat) * log(a) + sum(xdat - u) / a
}
}
else {
y <- (xdat - u)/a
y <- 1 + xi * y
if (any(y <= 0) || a <= 0) {
l <- 10 ^ 6
} else {
l <- length(xdat) * log(a) + sum(log(y)) * (1 / xi + 1)
}
}
l
}
#
### Upper tail ...
#
x2 <- seq(z$mle[2], xup, length = nint)
sol <- z$mle[1]
for (i in 1:nint) {
xi <- x2[i]
opt <- optim(sol, gpd.plikxi, method="BFGS")
sol <- opt$par
v2[i] <- opt$value
}
#
### Lower tail ...
#
x1 <- seq(z$mle[2], xlow, length = nint)
sol <- z$mle[1]
for (i in 1:nint) {
xi <- x1[i]
opt <- optim(sol, gpd.plikxi, method="BFGS")
sol <- opt$par
v1[i] <- opt$value
}
x <- c(rev(x1),x2); v <- c(rev(v1),v2)
ma <- -z$nllh
if (plotit){
plot(x, -v, type = "l", xlab = "Shape Parameter", ylab = "Profile Log-likelihood")
abline(h = ma, col = 4); abline(h = ma - 0.5 * qchisq(conf, 1), col = 4)
u <- par("usr")								### extract plotting coords
}
yaxis <- -v; xaxis <- x;conf.line <- ma - 0.5 * qchisq(conf, 1)
temp <- diff(yaxis-conf.line>0)			### to find where curve crosses CI line
loc <- which(temp==-1)					### upper limit of CI
x1 <- xaxis[loc]; x2 <- xaxis[loc+1]; y1 <- yaxis[loc]; y2 <- yaxis[loc+1]
up.lim <- x1+(conf.line-y1)*(x2-x1)/(y2-y1)
loc <- which(temp==1)
x1 <- xaxis[loc]; x2 <- xaxis[loc+1]; y1 <- yaxis[loc]; y2 <- yaxis[loc+1]
low.lim <- x1+(conf.line-y1)*(x2-x1)/(y2-y1)
xi <- z$mle[3]
if (plotit){
abline(v=up.lim,lty=2);text(up.lim,u[3]-0.02*(u[4]-u[3]),round(up.lim,2),xpd=T,cex=0.75)
abline(v=low.lim,lty=2);text(low.lim,u[3]-0.02*(u[4]-u[3]),round(low.lim,2),xpd=T,cex=0.75)
abline(v=xi,lty=2);text(xi,u[3]-0.02*(u[4]-u[3]),round(xi,2),xpd=T,cex=0.75)
}
invisible(c(low.lim,up.lim))
}
######################################################################
library(ismev)
# Simulate data from an exponential distribution
# [Note: in theory a threshold of 0 is the best choice!]
x <- rexp(1000)
num.thresh <- 96                       # number of thresholds
u.p <- seq(0,0.95,length = num.thresh) # probability levels of thresholds
u.v <- quantile(x, probs = u.p)        # vector of training thresholds
# Symmetric confidence intervals
res.GoM <- my_gpd_fitrange(x, u.vec = u.v, u.ps = u.p, prof = FALSE, add.nexc = TRUE)
s_res <- my_gpd_fitrange(x, u.vec = u.v, u.ps = u.p, prof = FALSE)
load_all()
library(devtools)
load_all()
?ithresh
load_all()
document()
?ithresh
cv_control <- list(prior_args = list(min_xi = -1))
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
plot(gom_cv)
u_vec
load_all()
cv_control <- list(prior_args = list(min_xi = -1))
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
plot(gom_cv)
cv_control <- list(prior_args = list(min_xi = -1))
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
load_all()
load_all()
cv_control <- list(prior_args = list(min_xi = -1))
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
profvis(gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4))
library(profvis)
profvis(gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4))
?use_build_ignore
?use_git_ignore
use_build_ignore("old_code")
load_all()
profvis(gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4))
load_all()
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
microbenchmark(gom_cv = ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4))
library(microbenchmark)
microbenchmark(gom_cv = ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4))
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
plot(gom_cv)
microbenchmark(gom_cv = ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4), times = 3)
library(devtools)
install_github("cran/MCMC4Extremes")
w=rggev(300,0.1,10,5,0.5)
library(MCMC4Extremes)
w=rggev(300,0.1,10,5,0.5)
w
hist(w)
ajust=ggevp(w,1,200,0.5)
class(ajust)
ls(ajust)
ajust$delta
dim(ajust$posterior)
pairs(ajust$posterior)
ts.plot(ajust$posterior[, 3])
ts.plot(ajust$posterior[, 1])
ts.plot(ajust$posterior[, 2])
ts.plot(ajust$posterior[, 1])
ajust=ggevp(w,1,2000,0.5)
ts.plot(ajust$posterior[, 1])
ts.plot(ajust$posterior[, 2])
ts.plot(ajust$posterior[, 3])
ts.plot(ajust$posterior[, 1])
dim(ajust$posterior)
install.packages("revdbayes")
install.packages("revdbayes")
install.packages("revdbayes")
library(devtools)
load_all()
document()
?ithresh
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
library(microbenchmark)
?microbenchmark
microbenchmark(
old = ithresh(data = gom, u_vec = u_vec, cv_control = list(use_rcpp = FALSE)),
new = ithresh(data = gom, u_vec = u_vec),
times = 10
)
microbenchmark(
old = ithresh(data = gom, u_vec = u_vec, method = "cv", cv_control = list(use_rcpp = FALSE)),
new = ithresh(data = gom, u_vec = u_vec, method = "cv"),
times = 10
)
library(threshr)
?threshr
cv_control <- list(prior_args = list(min_xi = -1))
gom_cv <- ithresh(data = gom, method = "cv", u_vec = u_vec, n_v = 4)
plot(gom_cv)
library(revdbayes)
?rpost
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
gpg <- rpost(n = 1000, model = "gp", prior = fp, thresh = u, data = gom)
plot(gpg)
plot(gpg, ru_scale = TRUE)
plot(gpg, ru_scale = FALSE)
plot(gpg)
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
gpg <- rpost(n = 1000, model = "gp", prior = fp, thresh = u, data = gom, trans = "BC")
plot(gpg)
plot(gpg, ru_scale = TRUE)
plot(gpg, ru_scale = FALSE)
library(devtools)
install_github("revdbayes")
install_github("paulnorthrop/revdbayes")
install.packages("revdbayes")
library(revdbayes)
install.packages("revdbayes")
library(revdbayes)
?rpost
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
bp <- set_bin_prior(prior = "jeffreys")
bgpg <- rpost(n = 1000, model = "bingp", prior = fp, thresh = u, data = gom,
bin_prior = bp)
plot(bpgp)
plot(bgpg)
plot(bgpg, ru_scale = FALSE)
plot(bgpg, ru_scale = FLASE)
plot(bgpg, ru_scale = F)
plot(bgpg, ru_scale = T)
plot(bgpg, ru_scale = TRUE
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
gpg <- rpost(n = 1000, model = "gp", prior = fp, thresh = u, data = gom)
plot(gpg))
u <- quantile(gom, probs = 0.65)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
gpg <- rpost(n = 1000, model = "gp", prior = fp, thresh = u, data = gom)
plot(gpg)
u <- quantile(gom, probs = 0.95)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
gpg <- rpost(n = 1000, model = "gp", prior = fp, thresh = u, data = gom)
plot(gpg)
u <- quantile(gom, probs = 0.975)
fp <- set_prior(prior = "flat", model = "gp", min_xi = -1)
gpg <- rpost(n = 1000, model = "gp", prior = fp, thresh = u, data = gom)
plot(gpg)
stability
?ismev
library(ismev)
?gpd.fit
?gpd.fitrange
?ithresh
library(devtools)
document()
library(devtools)
document()
?stability
document()
?stability
document()
?stability
document()
?stability
document()
?stability
document()
load_all()
?stability
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
gom_stab
?ithresh
numeric(20)
ls(gom_stab)
document()
?stability
gom_stab$ests
ls(gom_stab)
document()
?stability
gom_stab <- stability(data = gom, u_vec = u_vec)
warnings()
document()
gom_stab <- stability(data = gom, u_vec = u_vec)
conf <- 0.95
stats::qnorm((1 - conf) / 2)
library(devtools)
load_all()
document()
?stability
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
gom_stab
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
gom_stab
ls(gom_stab)
?plot.evpost
load_all()
document()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
ls(gom_stab)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
load_all()
plot(gom_stab)
load_all()
plot(gom_stab)
load_all()
plot(gom_stab)
load_all()
plot(gom_stab)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
plot(gom_stab)
ls(gom_stab)
gom_stab$lower
plot(gom_stab)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
?gp_mle
gp_mle
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
?gpd.fit
library(ismev)
library(ismev)
?gpd.fit
library(ismev)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
load_all()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
plot(gom_stab)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
plot(gom_stab)
load_all()
plot(gom_stab)
load_all()
plot(gom_stab)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
?gpd.fitrange
load_all()
document()
?stability
document()
?stability
document()
?stability
document()
?stability
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE, mult = c(1,1))
document()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE, mult = c(1,1))
document()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE, mult = c(1,1))
document()
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE, mult = c(1,1))
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE, mult = c(0.1,2))
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE, plot_prof = TRUE)
plot(gom_stab)
ls(gom_stab)
document()
plot(gom_stab)
document()
plot(gom_stab)
document()
plot(gom_stab)
document()
plot(gom_stab)
document()
plot(gom_stab)
plot(gom_stab, top_scale = "excesses")
library(devtools)
document()
?stability
u_vec <- quantile(gom, probs = seq(0, 0.95, by = 0.05))
gom_stab <- stability(data = gom, u_vec = u_vec)
plot(gom_stab)
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
plot(gom_stab)
plot(gom_stab, top_scale = "none")
plot(gom_stab, top_scale = "excesses")
document()
plot(gom_stab)
document()
plot(gom_stab)
plot(gom_stab, top_scale = NULL)
plot(gom_stab, top_scale = "excesses")
plot(gom_stab, top_scale = "opposite")
plot(gom_stab, top_scale = "opposite", prob = TRUE)
plot(gom_stab, top_scale = "opposite", prob = FALSE)
plot(gom_stab, top_scale = "opposite", prob = TRUE)
?pretty
?signif
document()
plot(gom_stab, top_scale = "opposite", prob = TRUE)
document()
plot(gom_stab, top_scale = "opposite", prob = TRUE)
document()
plot(gom_stab, top_scale = "opposite", prob = TRUE)
plot(gom_stab, top_scale = "opposite", prob = FALSE)
plot(gom_stab, top_scale = "excesses", prob = FALSE)
plot(gom_stab, top_scale = "excesses", prob = TRUE)
plot(gom_stab, top_scale = "excesses", prob = FALSE)
plot(gom_stab)
document()
plot(gom_stab)
ls(gom_stab)
document()
plot(gom_stab)
gom_stab <- stability(data = gom, u_vec = u_vec, prof = TRUE)
plot(gom_stab)
document()
plot(gom_stab)
plot(gom_stab, prob = FALSE)
document()
plot(gom_stab, prob = FALSE)
document()
plot(gom_stab, prob = FALSE)
plot(gom_stab)
plot(gom_stab, prob = FALSE)
plot(gom_stab)
document()
plot(gom_stab)
document()
plot(gom_stab)
plot(gom_stab, prob = FALSE)
plot(gom_stab)
plot(gom_stab, prob = FALSE)
plot(gom_stab)
plot(gom_stab, prob = FALSE)
plot(gom_stab)
document()
plot(gom_stab)
plot(gom_stab, prob = FALSE)
plot(gom_stab, prob = FALSE, top_scale = "excesses")
plot(gom_stab, prob = FALSE, top_scale = "opposite")
plot(gom_stab, prob = TRUE, top_scale = "opposite")
plot(gom_stab, prob = TRUE,)
plot(gom_stab, prob = TRUE)
document()
plot(gom_stab, prob = TRUE)
plot(gom_stab, prob = FALSE)
